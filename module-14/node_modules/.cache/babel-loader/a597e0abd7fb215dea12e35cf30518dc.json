{"ast":null,"code":"var _jsxFileName = \"/Users/bachbui/Desktop/source/react-complete-guide/module-14/src/App.js\";\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport AddMovie from './components/AddMovie';\nimport './App.css';\nconst dummyMovies = [{\n  id: 1,\n  title: 'Some Dummy Movie',\n  openingText: 'This is the opening text of the movie',\n  releaseDate: '2021-05-18'\n}, {\n  id: 2,\n  title: 'Some Dummy Movie 2',\n  openingText: 'This is the second opening text of the movie',\n  releaseDate: '2021-05-19'\n}];\n\nfunction App() {\n  const [movies, setMovies] = useState(dummyMovies);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const res = await fetch('https://swapi.dev/api/films/');\n      const data = await res.json();\n\n      if (!res.ok) {\n        throw new Error('Error');\n      }\n\n      const mappedMovies = data.results.map(item => {\n        return {\n          id: item.episode_id,\n          title: item.title,\n          openingText: item.opening_crawl,\n          releaseDate: item.release_date\n        };\n      });\n      setMovies(mappedMovies);\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  const addMovieHandler = async movie => {\n    const res = await fetch('', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await res.json();\n    console.log(data);\n  };\n\n  const content = useMemo(() => {\n    if (error) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 14\n        }\n      }, error);\n    } else if (loading) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 14\n        }\n      }, \"Loading...\");\n    } else if ((movies === null || movies === void 0 ? void 0 : movies.length) === 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 14\n        }\n      }, \"Empty\");\n    } else {\n      return /*#__PURE__*/React.createElement(MoviesList, {\n        movies: movies,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 14\n        }\n      });\n    }\n  }, [error, loading, movies]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useState","MoviesList","AddMovie","dummyMovies","id","title","openingText","releaseDate","App","movies","setMovies","loading","setLoading","error","setError","fetchMoviesHandler","res","fetch","data","json","ok","Error","mappedMovies","results","map","item","episode_id","opening_crawl","release_date","e","message","addMovieHandler","movie","method","body","JSON","stringify","headers","console","log","content","length"],"sources":["/Users/bachbui/Desktop/source/react-complete-guide/module-14/src/App.js"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport AddMovie from './components/AddMovie';\n\nimport './App.css';\n\nconst dummyMovies = [\n  {\n    id: 1,\n    title: 'Some Dummy Movie',\n    openingText: 'This is the opening text of the movie',\n    releaseDate: '2021-05-18',\n  },\n  {\n    id: 2,\n    title: 'Some Dummy Movie 2',\n    openingText: 'This is the second opening text of the movie',\n    releaseDate: '2021-05-19',\n  },\n];\n\nfunction App() {\n  const [movies, setMovies] = useState(dummyMovies);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const res = await fetch('https://swapi.dev/api/films/');\n      const data = await res.json();\n      if (!res.ok) {\n        throw new Error('Error');\n      }\n      const mappedMovies = data.results.map((item) => {\n        return {\n          id: item.episode_id,\n          title: item.title,\n          openingText: item.opening_crawl,\n          releaseDate: item.release_date,\n        };\n      });\n      setMovies(mappedMovies);\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  const addMovieHandler = async (movie) => {\n    const res = await fetch('', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const data = await res.json();\n\n    console.log(data);\n  };\n\n  const content = useMemo(() => {\n    if (error) {\n      return <p>{error}</p>;\n    } else if (loading) {\n      return <p>Loading...</p>;\n    } else if (movies?.length === 0) {\n      return <p>Empty</p>;\n    } else {\n      return <MoviesList movies={movies} />;\n    }\n  }, [error, loading, movies]);\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler}>Fetch Movies</AddMovie>\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}